!function(globals){"use strict";if(typeof define!=="undefined"&&define.amd){define([],function(){return secureRandom})}else if(typeof module!=="undefined"&&module.exports){module.exports=secureRandom}else{globals.secureRandom=secureRandom}function secureRandom(count,options){options=options||{type:"Array"};if(typeof process!="undefined"&&typeof process.pid=="number"&&process.versions&&process.versions.node){return nodeRandom(count,options)}else{const crypto=window.crypto||window.msCrypto;if(!crypto)throw new Error("Your browser does not support window.crypto.");return browserRandom(count,options)}}function nodeRandom(count,options){const crypto=require("crypto");const buf=crypto.randomBytes(count);switch(options.type){case"Array":return[].slice.call(buf);case"Buffer":return buf;case"Uint8Array":const arr=new Uint8Array(count);for(let i=0;i<count;++i){arr[i]=buf.readUInt8(i)}return arr;default:throw new Error(options.type+" is unsupported.")}}function browserRandom(count,options){const nativeArr=new Uint8Array(count);const crypto=window.crypto||window.msCrypto;crypto.getRandomValues(nativeArr);switch(options.type){case"Array":return[].slice.call(nativeArr);case"Buffer":try{const b=new Buffer(1)}catch(e){throw new Error("Buffer not supported in this environment. Use Node.js or Browserify for browser support.")}return new Buffer(nativeArr);case"Uint8Array":return nativeArr;default:throw new Error(options.type+" is unsupported.")}}secureRandom.randomArray=function(byteCount){return secureRandom(byteCount,{type:"Array"})};secureRandom.randomUint8Array=function(byteCount){return secureRandom(byteCount,{type:"Uint8Array"})};secureRandom.randomBuffer=function(byteCount){return secureRandom(byteCount,{type:"Buffer"})}}(this);